generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BROKER
  RENTER
  PROPERTY_OWNER
  REAL_ESTATE_AGENT
  FLAT_MATES
  PG_OWNER
  CO_LIVING_OWNER
}

enum OTPType {
  EMAIL
  PHONE
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  CLOSED
}

enum PropertyType {
  INDEPENDENT_HOUSE
  VILLA
  PLOT
  BUILDER_FLOOR
  FLAT_APARTMENT
  CO_LIVING
  PG
}

enum Furnishing {
  NONE
  FULLY_FURNISHED
  SEMI_FURNISHED
}

enum RentFor {
  BACHELOR
  FAMILY
}

enum LeadStatus {
  NEW
  CONTACTED
  FOLLOWUP
  VIEWING_SCHEDULED
  NEGOTIATING
  CONVERTED
  LOST
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeadSource {
  DIRECT
  REFERRAL
  WEBSITE
  SOCIAL_MEDIA
  PROPERTY_PORTAL
  OTHER
}

enum RoomFurnishingItem {
  AC
  BED
  MATTRESS
  WARDROBE
  STUDY_TABLE
  CHAIR
  GEYSER
  EXHAUST
}

enum HouseFurnishingItem {
  TV
  FRIDGE
  SOFA
  DINING_TABLE
  RO_WATER_PURIFIER
}

enum Amenities {
  WIFI
  TWO_WHEELER_PARKING
  FOUR_WHEELER_PARKING
  WATER_SUPPLY_24_7
  POWER_BACKUP
  SECURITY_24_7
  CCTV
  DAILY_HOUSEKEEPING
  MEALS
  GYM
  BALCONY
}

enum Features {
  COUPLE_FRIENDLY
  PET_FRIENDLY
  OWNER_FREE
  ATTACHED_BATHROOM
  GATED_COMMUNITY
  BALCONY
}

enum SharingType {
  SINGLE
  SHARED
  DOUBLE_SHARING
  TRIPLE_SHARING
}

enum Configuration {
  ONE_RK
  ONE_BHK
  TWO_BHK
  THREE_BHK
  FOUR_BHK
  FOUR_PLUS_BHK
}

enum PreferredTenant {
  FAMILY
  BACHELOR
  COMPANY_LEASE
  MALE
  FEMALE
  ANY
}

enum LockInPeriod {
  FIFTEEN_DAYS
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  phoneNumber    String?  @unique
  aadharNumber   String?  @unique
  companyName    String?
  role           Role
  privacySetting String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  gender Gender? @default(OTHER)

  listings         Listing[]         @relation("broker")
  verifiedListings Listing[]         @relation("verifiedBy")
  favorites        FavoriteListing[]
  visitedListings  VisitedListing[]
  Lead             Lead[]
  userAuth         UserAuth?
  Report           Report[]
}

model UserAuth {
  id              String  @id @default(uuid())
  password        String?
  isEmailVerified Boolean @default(false)
  isPhoneVerified Boolean @default(false)
  provider        String?
  providerId      String? @unique
  accessToken     String?

  otps          OTP[]
  refreshTokens RefreshToken[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([provider, providerId])
}

model OTP {
  id        String   @id @default(uuid())
  code      String
  type      OTPType
  expiresAt DateTime
  isUsed    Boolean  @default(false)

  createdAt  DateTime  @default(now())
  UserAuth   UserAuth? @relation(fields: [userAuthId], references: [id])
  userAuthId String?

  @@index([userAuthId])
}

model RefreshToken {
  id         String    @id @default(uuid())
  token      String    @unique
  expires    DateTime
  createdAt  DateTime  @default(now())
  UserAuth   UserAuth? @relation(fields: [userAuthId], references: [id])
  userAuthId String?

  @@index([userAuthId])
}

model Listing {
  id            String       @id @default(uuid())
  title         String
  propertyType  PropertyType
  mainImage     String?
  photos        String[]
  isActive      Boolean      @default(true)
  views         Int          @default(0)
  isPreoccupied Boolean      @default(false)

  // ai feature
  description   String
  descriptionAi Boolean @default(false)

  price         Float // Monthly rent or selling price
  security      Float         @default(0)
  brokerage     Float         @default(0)
  isNegotiable  Boolean       @default(false)
  lockInPeriod  LockInPeriod?
  availableFrom DateTime?     @default(now())

  configuration         Configuration?
  bedrooms              Int?
  bathrooms             Int?
  balconies             Int?
  floorNumber           String?
  totalFloors           Int? // For Villa
  maintenanceCharges    Float?
  isMaintenanceIncluded Boolean        @default(true)

  // Co-living/PG specific
  roomType       String? // "1 Room" or "1 RK" for coliving
  sharingType    SharingType?
  unitsAvailable Int?
  roomSize       Float? // in sq ft

  // New pre-occupied flow fields
  roomFurnishingItems  RoomFurnishingItem[] // For detailed room furnishing
  houseFurnishingItems HouseFurnishingItem[] // For detailed house furnishing

  // Maintenance charges per person
  maidChargesPerPerson    Float? // For cleaning + utensils
  cookChargesPerPerson    Float?
  wifiChargesPerPerson    Float?
  otherMaintenanceCharges Float?
  otherMaintenanceDetails String?

  // verified 
  verified     Boolean   @default(false)
  verifiedAt   DateTime?
  verifiedById String?
  verifiedBy   User?     @relation(fields: [verifiedById], references: [id], name: "verifiedBy")

  // Features and Amenities
  amenities Amenities[]
  features  Features[]

  furnishing       Furnishing?
  furnishingExtras String[]

  preferredTenant PreferredTenant?
  preferredGender Gender[]

  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  brokerId String
  broker   User   @relation(fields: [brokerId], references: [id], name: "broker")

  leads Lead[]

  status    ListingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  favoritedBy FavoriteListing[]
  visitedBy   VisitedListing[]

  reports  Report[]
  Occupant Occupant[]

  // Add the metro station relationship
  metroStations ListingMetroStation[]

  @@index([price, locationId])
}

model Occupant {
  id         String  @id @default(uuid())
  name       String
  age        Int
  profession String
  about      String?
  gender     Gender  @default(OTHER)

  // Relation to listing
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listingId])
}

model Report {
  id        String       @id @default(uuid())
  reason    String
  details   String?
  status    ReportStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  reportedById String
  reportedBy   User   @relation(fields: [reportedById], references: [id])

  @@index([listingId])
  @@index([reportedById])
}

model FavoriteListing {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  createdAt DateTime @default(now())

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
}

model VisitedListing {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  visitedAt DateTime @default(now())

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
}

model Location {
  id        String    @id @default(uuid())
  city      String // City where the property is located
  state     String // State/Province
  country   String // Country
  latitude  Float // Geographical latitude
  longitude Float // Geographical longitude
  listings  Listing[]

  @@unique([latitude, longitude])
}

model Lead {
  id                 String         @id @default(uuid())
  name               String
  email              String?
  phoneNumber        String         @unique
  alternatePhone     String?
  isActive           Boolean        @default(true)
  budgetMin          Float
  budgetMax          Float
  preferredLocations String[]
  propertyTypes      PropertyType[]
  requirements       String?
  note               String         @default("")
  firstResponseTime  Float? // Time in minutes until first response

  status   LeadStatus @default(NEW)
  priority Priority   @default(LOW)

  // New relation to Listing
  listingId String?
  listing   Listing? @relation(fields: [listingId], references: [id])

  brokerId  String
  broker    User       @relation(fields: [brokerId], references: [id])
  source    LeadSource @default(DIRECT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([phoneNumber])
}

model MetroStation {
  id        Int      @id @default(autoincrement())
  name      String
  line      String
  latitude  Float
  longitude Float
  city      String   @default("Gurgaon")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listings ListingMetroStation[]
}

// Junction table with distance information
model ListingMetroStation {
  id             String       @id @default(uuid())
  listing        Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId      String
  metroStation   MetroStation @relation(fields: [metroStationId], references: [id], onDelete: Cascade)
  metroStationId Int

  // Store the distance between the listing and metro station
  distanceInKm   Float
  walkingTimeMin Int?
  drivingTimeMin Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([listingId, metroStationId])
  @@index([listingId])
  @@index([metroStationId])
}
