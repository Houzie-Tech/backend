// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BROKER
  RENTER
}

enum OTPType {
  EMAIL
  PHONE
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  CLOSED
}

enum PropertyType {
  INDEPENDENT_HOUSE
  VILLA
  PLOT
  BUILDER_FLOOR
  FLAT_APARTMENT
  CO_LIVING
  PG
}

enum Furnishing {
  NONE
  FULLY_FURNISHED
  SEMI_FURNISHED
}

enum RentFor {
  BACHELOR
  FAMILY
}

enum LeadStatus {
  NEW
  CONTACTED
  FOLLOWUP
  VIEWING_SCHEDULED
  NEGOTIATING
  CONVERTED
  LOST
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeadSource {
  DIRECT
  REFERRAL
  WEBSITE
  SOCIAL_MEDIA
  PROPERTY_PORTAL
  OTHER
}

enum Amenities {
  WIFI
  TWO_WHEELER_PARKING
  FOUR_WHEELER_PARKING
  WATER_SUPPLY_24_7
  POWER_BACKUP
  SECURITY_24_7
  CCTV
  DAILY_HOUSEKEEPING
  MEALS
  GYM
}

enum Features {
  COUPLE_FRIENDLY
  PET_FRIENDLY
  OWNER_FREE
  ATTACHED_BATHROOM
  GATED_COMMUNITY
}

enum SharingType {
  SINGLE
  SHARED
  DOUBLE_SHARING
  TRIPLE_SHARING
}

enum Configuration {
  ONE_RK
  ONE_BHK
  TWO_BHK
  THREE_BHK
  FOUR_BHK
  FOUR_PLUS_BHK
}

enum PreferredTenant {
  FAMILY
  BACHELOR
  COMPANY_LEASE
  ANY
}

enum LockInPeriod {
  FIFTEEN_DAYS
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  phoneNumber    String?  @unique
  aadharNumber   String?  @unique
  role           Role
  privacySetting String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  listings Listing[]
  Lead     Lead[]
  userAuth UserAuth?
}

model UserAuth {
  id              String  @id @default(uuid())
  password        String?
  isEmailVerified Boolean @default(false)
  isPhoneVerified Boolean @default(false)
  provider        String?
  providerId      String? @unique
  accessToken     String?

  otps          OTP[]
  refreshTokens RefreshToken[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([provider, providerId])
}

model OTP {
  id        String   @id @default(uuid())
  code      String
  type      OTPType
  expiresAt DateTime
  isUsed    Boolean  @default(false)

  createdAt  DateTime  @default(now())
  UserAuth   UserAuth? @relation(fields: [userAuthId], references: [id])
  userAuthId String?

  @@index([userAuthId])
}

model RefreshToken {
  id         String    @id @default(uuid())
  token      String    @unique
  expires    DateTime
  createdAt  DateTime  @default(now())
  UserAuth   UserAuth? @relation(fields: [userAuthId], references: [id])
  userAuthId String?

  @@index([userAuthId])
}

model Listing {
  id            String       @id @default(uuid())
  title         String
  description   String
  propertyType  PropertyType
  mainImage     String?
  photos        String[]
  isActive      Boolean      @default(true)
  views         Int          @default(0)
  isPreoccupied Boolean      @default(false)

  price         Float // Monthly rent or selling price
  security      Float         @default(0)
  brokerage     Float         @default(0)
  isNegotiable  Boolean       @default(false)
  lockInPeriod  LockInPeriod?
  availableFrom DateTime?     @default(now())

  configuration         Configuration?
  bedrooms              Int?
  bathrooms             Int?
  balconies             Int?
  floorNumber           String?
  totalFloors           Int? // For Villa
  maintenanceCharges    Float?
  isMaintenanceIncluded Boolean        @default(true)

  // Co-living/PG specific
  roomType       String? // "1 Room" or "1 RK" for coliving
  sharingType    SharingType?
  unitsAvailable Int?
  roomSize       Float? // in sq ft

  // Features and Amenities
  amenities Amenities[]
  features  Features[]

  furnishing       Furnishing?
  furnishingExtras String[]

  preferredTenant PreferredTenant?

  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  brokerId String
  broker   User   @relation(fields: [brokerId], references: [id])

  leads Lead[]

  status    ListingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([price, locationId])
}

model Location {
  id        String    @id @default(uuid())
  city      String // City where the property is located
  state     String // State/Province
  country   String // Country
  latitude  Float // Geographical latitude
  longitude Float // Geographical longitude
  listings  Listing[]

  @@unique([latitude, longitude])
}

model Lead {
  id                 String         @id @default(uuid())
  name               String
  email              String?
  phoneNumber        String         @unique
  alternatePhone     String?
  isActive           Boolean        @default(true)
  budgetMin          Float
  budgetMax          Float
  preferredLocations String[]
  propertyTypes      PropertyType[]
  requirements       String?
  note               String         @default("")

  // New relation to Listing
  listingId String?
  listing   Listing? @relation(fields: [listingId], references: [id])

  brokerId  String
  broker    User       @relation(fields: [brokerId], references: [id])
  source    LeadSource @default(DIRECT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([phoneNumber])
}
