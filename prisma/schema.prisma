// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BROKER
  RENTER
}

enum OTPType {
  EMAIL
  PHONE
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  CLOSED
}

enum PropertyType {
  INDEPENDENT_HOUSE
  VILLA
  PLOT
  BUILDER_FLOOR
  FLAT_APARTMENT
  CO_LIVING
  PG
}

enum Furnishing {
  NONE
  FULLY_FURNISHED
  SEMI_FURNISHED
}

enum RentFor {
  BACHELOR
  FAMILY
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  phoneNumber  String   @unique
  aadharNumber String   @unique
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  isEmailVerified Boolean        @default(false)
  isPhoneVerified Boolean        @default(false)
  otps            OTP[]
  refreshTokens   RefreshToken[]
  listings        Listing[] // Relationship with listings
}

model OTP {
  id        String   @id @default(uuid())
  code      String
  type      OTPType
  expiresAt DateTime
  isUsed    Boolean  @default(false)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expires   DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}

model Listing {
  id            String       @id @default(uuid())
  title         String
  description   String // Detailed property description
  price         Float // Price or rent amount
  propertyType  PropertyType // Type of property
  configuration String // 1BHK, 2BHK, etc.
  bedrooms      Int // Number of bedrooms
  bathrooms     Int // Number of bathrooms
  furnishing    Furnishing // Furnishing status
  rentFor       RentFor[]    @default([]) // Target audience for rental (Bachelor, Family)
  photos        String[] // Array of photo URLs (max 10)

  rentDetails RentDetails? // Embedded rent details for rental properties
  sellDetails SellDetails? // Embedded sell details for sale properties

  locationId String
  location   Location @relation(fields: [locationId], references: [id]) // Embedded location details

  status ListingStatus @default(PENDING) // Status of the form (e.g., PENDING, APPROVED, REJECTED, ACTIVE, CLOSED)

  brokerId String
  broker   User   @relation(fields: [brokerId], references: [id]) // Association with User having the BROKER role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([price,locationId])
}

model RentDetails {
  id            String   @id @default(uuid())
  rentAmount    Float // Rent amount
  deposit       Float // Deposit amount
  availableFrom DateTime // Availability date

  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id])
}

model SellDetails {
  id          String @id @default(uuid())
  askingPrice Float // Asking price for sale

  listingId String  @unique
  listing   Listing @relation(fields: [listingId], references: [id])
}

model Location {
  id        String    @id @default(uuid())
  city      String // City where the property is located
  state     String // State/Province
  country   String // Country
  latitude  Float // Geographical latitude
  longitude Float // Geographical longitude
  listings  Listing[]
}
